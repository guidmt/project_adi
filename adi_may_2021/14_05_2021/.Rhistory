distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x,y-1]+1,
distances_matrix[x-1,y-1]))
} else {
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x-1,y-1]+1,
distances_matrix[x,y-1]+1))
}
}
}
edit_distance<-distances_matrix[size_rows-1,size_columns-1]
edit_distance
adist(a,b)
a = "gatto"
b = "gxtx"
adist(a,b)
a
b
size_rows<-nchar(a)+1
size_columns<-nchar(b)+1
distances_matrix<-matrix(0,size_rows,size_columns)
xstring<-unlist(strsplit(a,split=""))
ystring<-unlist(strsplit(b,split=""))
rownames(distances_matrix)<-c("epsilon",xstring)
colnames(distances_matrix)<-c("epsilon",ystring)
for(t1 in 1:size_rows){
distances_matrix[t1,1] <- t1-1
}
for(t2 in 1:size_columns){
distances_matrix[1,t2] <- t2-1
}
# start to check if the characters are the same
for(x in 2:size_rows){
for(y in 2:size_columns){
if(xstring[x-1]==ystring[y-1]){
# [x-1,y]+1 insertion
# [x-1,y-1] substitution
# [x,y-1]+1 deletion
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x,y-1]+1,
distances_matrix[x-1,y-1]))
} else {
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x-1,y-1]+1,
distances_matrix[x,y-1]+1))
}
}
}
edit_distance<-distances_matrix[size_rows-1,size_columns-1]
edit_distance
distances_matrix
levenshteinDist<-function(a,b){
size_rows<-nchar(a)+1
size_columns<-nchar(b)+1
distances_matrix<-matrix(0,size_rows,size_columns)
xstring<-unlist(strsplit(a,split=""))
ystring<-unlist(strsplit(b,split=""))
rownames(distances_matrix)<-c("epsilon",xstring)
colnames(distances_matrix)<-c("epsilon",ystring)
for(t1 in 1:size_rows){
distances_matrix[t1,1] <- t1-1
}
for(t2 in 1:size_columns){
distances_matrix[1,t2] <- t2-1
}
# start to check if the characters are the same
for(x in 2:size_rows){
for(y in 2:size_columns){
if(xstring[x-1]==ystring[y-1]){
# [x-1,y]+1 insertion
# [x-1,y-1] substitution
# [x,y-1]+1 deletion
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x,y-1]+1,
distances_matrix[x-1,y-1]))
} else {
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x-1,y-1]+1,
distances_matrix[x,y-1]+1))
}
}
}
edit_distance<-distances_matrix[size_rows,size_columns]
return(edit_distance)
}
levenshteinDist(a,b)
levenshteinDist("guidantonio",b)
adist("guidantonio",b)
seq(2,96,2)
80/148
80=21
80+21
101/148
68/148
78/149
113=20
113+20
78/149
53/149
seq(1:10)
order(seq(1:10,decreasing=T)
)
order(seq(1:10,decreasing=T))
order(seq(1:10),decreasing=T)
head(order(seq(1:10),decreasing=T),-1)
head(order(seq(1:10),decreasing=T),-5)
head(order(seq(1:10),decreasing=T),-4)
head(order(seq(1:10),decreasing=T),100)
a = "gatto"
b = "gxtx"
levenshteinDist<-function(a,b){
size_rows<-nchar(a)+1
size_columns<-nchar(b)+1
distances_matrix<-matrix(0,size_rows,size_columns)
xstring<-unlist(strsplit(a,split=""))
ystring<-unlist(strsplit(b,split=""))
rownames(distances_matrix)<-c("epsilon",xstring)
colnames(distances_matrix)<-c("epsilon",ystring)
for(t1 in 1:size_rows){
distances_matrix[t1,1] <- t1-1
}
for(t2 in 1:size_columns){
distances_matrix[1,t2] <- t2-1
}
# start to check if the characters are the same
for(x in 2:size_rows){
for(y in 2:size_columns){
if(xstring[x-1]==ystring[y-1]){
# [x-1,y]+1 insertion
# [x-1,y-1] substitution
# [x,y-1]+1 deletion
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x,y-1]+1,
distances_matrix[x-1,y-1]))
} else {
distances_matrix[x,y]<-min(c(distances_matrix[x-1,y]+1,
distances_matrix[x-1,y-1]+1,
distances_matrix[x,y-1]+1))
}
}
}
edit_distance<-distances_matrix[size_rows,size_columns]
return(edit_distance)
}
levenshteinDist
levenshteinDist("gatto","gxtx")
adist("gatto","gxtx")
levenshteinDist("AAAAAA","AAAAAB")
levenshteinDist("AAAAAA","AAAATC")
levenshteinDist("AAAAAA","AAAGTC")
alphabet = c("A","C","G","T")
size = 6
N = 96
alphabet
size
N
sample(alphabet,6)
sample(alphabet,replace=T,6)
initial_string<-sample(alphabet,replace=T,6)
initial_string
initial_string
initial_string
initial_string
levenshteinDist(initial_string,initial_string)
initial_string
levenshteinDist(paste(initial_string,collapse=""),initial_string)
initial_string<-paste(sample(alphabet,replace=T,6),collapse="")
levenshteinDist(paste(initial_string,collapse=""),initial_string)
sample("m","d","s",3)
sample("m","d","s",3,replace=T)
sample("m","d","s",replace=T)
sample("m","d","s",replace=T,3)
sample(c("m","d","s"),replace=T,3)
rand_events<-sample(c("m","d","s"),replace=T,3)
rand_events
actions<-sample(c("m","d","s"),replace=T,3)
actions
string<-paste(sample(alphabet,replace=T,6),collapse="")
string
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
actions<-sample(c("m","d","s"),replace=T,3)
actions
levenshteinDist("ACAC","ACAC")
levenshteinDist("ACAC","AAGG")
string
string()
string<-paste(sample(alphabet,replace=T,6),collapse="")
string
levenshteinDist(string,string)
levenshteinDist(string,GTGTA)
levenshteinDist(string,"GTGTA")
levenshteinDist(string,"GTGAA")
levenshteinDist(string,"GTGAAT")
levenshteinDist(string,"GTGAAT")
levenshteinDist(string,"GTGAAT")
levenshteinDist(string,"GTGAAT")
levenshteinDist(string,"GTGAAT")
levenshteinDist(string,"GTGAAT")
nchar<-nchar(string)
nchar
sample(string)
sample(string)
string<-sample(alphabet,replace=T,6)
string
string<-sample(alphabet,replace=T,6)
string
string
string
string<-sample(alphabet,replace=T,6)
string
nchar<-nchar(string)
string<-sample(alphabet,replace=T,6)
string
setdiff(alphabet,string)
alphabet
string
N=96
ed=3
alpha_specific<-setdiff(alphabet,string)
alpha_specific
alpha_specific
alpha_specific<-as.numeric(setdiff(alphabet,string))
alpha_specific
alpha_specific<-as.integer(setdiff(alphabet,string))
alpha_specific
alpha_specific===0
alpha_specific
isTRUE(alpha_specific==0)
alpha_specific
as.numeric(alpha_specific)
as.integer(alpha_specific)
alpha_specific<-length(setdiff(alphabet,string))
alpha_specific
isTRUE(alpha_specific==0)
alpha_specific
alpha_specific<-length(setdiff(alphabet,string))
alpha_specific
string
rand(string)
random(string)
string
nevents<-sample(3:ed)
nevents
ed
nevents<-sample(3:size)
nevents
nevents<-sample(3:size)
nevents
nevents<-sample(3:size,1)
nevents
nevents
nevents
N=3
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
while(i < N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,string)
}
i=1
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
while(i < N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,string)
}
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
while(i < N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,strings)
}
N
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
while(i < 1:N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,strings)
}
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
while(i < 1:N){
print(i)
}
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
for(i in 1:N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,strings)
}
saved_string
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
for(i in 1:N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,paste(strings,collapse=""))
}
saved_string
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
for(i in 1:N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,paste(strings,collapse=""))
}
saved_string
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
N=2
for(i in 1:N){
# There are two possibilities:
# substitutions (s)
saved_string<-c(saved_string,paste(strings,collapse=""))
}
strings<-sample(alphabet,replace=T,6)
N=1
saved_string<-c(saved_string,paste(strings,collapse=""))
saved_string<
saved_string
strings<-sample(alphabet,replace=T,6)
saved_string<-NULL
saved_string
saved_string<-c(saved_string,paste(strings,collapse=""))
saved_string
6^6
alpha_specific
nevents<-sample(3:size,1)
nevents
saved_string
string<-saved_strings[i]
string
seq(2,96,by=2)
levenshteinDist(ATCTAA,ATCATT)
levenshteinDist("ATCTAA","ATCATT")
levenshteinDist("ATCGTA","ATTTAA")
levenshteinDist("ATCGTA","ATCTAA")
levenshteinDist("ATTTAA","GTAATT")
levenshteinDist("ATCTAA","ATTTAA")
levenshteinDist("ATCGTA","GTAATT")
seq(2,12)
seq(2,12,by=2)
sum(2:12)
sum(seq(2,12,2))
sum(seq(2,96,2))
levenshteinDist("ACAACC","ACGACT")
96/2
levenshteinDist("AAAGCT","GCTAAA")
34-28
install.packages("devtools")
library(devtools)
install_github("hanasusak/cDriver")
library(cDriver)
30000/12
1500
40000/12
3360/8774
1373/8774
4041/8774
lgg_temp[,-c(2:9)]
100000/6
160000/30
5333*6
166000*12
100000/6
16666/30
500*30
15000*6
500/8
62*8
496*30
50*8
400*30
100000/6
20094-19740
sim_dati_chiara<-matrix(0,1:10000,ncol=11)
dim(sim_dati_chiara)
10000*11
sim_dati_chiara<-matrix(runif(110000),nrow=10000,ncol=11)
dim(sim_dati_chiara)
str(sim_dati_chiara)
head(sim_dati_chiara)
sim_dati_chiara<-data.frame(matrix(runif(110000),nrow=10000,ncol=11))
sim_dati_chiara
head(sim_dati_chiara)
dim(sim_dati_chiara)
sim_dati_chiara[,1]<-paste("genes",nrow(sim_dati_chiara),sep="_")
colnames(sim_dati_chiara)<-c("genes","gatto","cane","pipistrello","balena","criceto","tartaruga","pappagallo","rinoceronte","giraffa","ratto")
dim(sim_dati_chiara)
head(sim_dati_chiara)
sim_dati_chiara<-data.frame(matrix(runif(110000),nrow=10000,ncol=11))
sim_dati_chiara[,1]<-paste("genes",1:nrow(sim_dati_chiara),sep="_")
colnames(sim_dati_chiara)<-c("genes","gatto","cane","pipistrello","balena","criceto","tartaruga","pappagallo","rinoceronte","giraffa","ratto")
sim_dati_chiara
pval_all<-NULL
i=1
cancer_no<-as.numeric((sim_dati_chiara[i,2:6])
cancer_yes<-as.numeric((sim_dati_chiara[i,7:10])
cancer_no<-as.numeric(sim_dati_chiara[i,2:6])
cancer_yes<-as.numeric(sim_dati_chiara[i,7:10])
cancer_no
cancer_yes
res_stat<-wilcox.test(cancer_yes,cancer_no)$p.value
pval_all<-NULL
#per ogni riga della matrice
for(i in 1:nrow(sim_dati_chiara)){
#estrai i valori di CNV per i no cancer e cancer si
cancer_no<-as.numeric(sim_dati_chiara[i,2:6])
cancer_yes<-as.numeric(sim_dati_chiara[i,7:10])
#calcola la statistica
res_stat<-wilcox.test(cancer_yes,cancer_no)$p.value
pval_all<-c(pval_all,res_stat)
}
qvalue<-p.adjust(pval_all,"BH")
df_stat_chiara<-data.frame(genes=sim_dati_chiara[,1], pvalue=pval_all, qvalue= qvalue)
df_stat_chiara<
df_stat_chiara
head(df_stat_chiara)
pval_all<-NULL
genes_all<-NULL
#per ogni riga della matrice
for(i in 1:nrow(sim_dati_chiara)){
print(sim_dati_chiara[i,1])
#estrai i valori di CNV per i no cancer e cancer si
cancer_no<-as.numeric(sim_dati_chiara[i,2:6])
cancer_yes<-as.numeric(sim_dati_chiara[i,7:10])
#calcola la statistica
res_stat<-wilcox.test(cancer_yes,cancer_no)$p.value
pval_all<-c(pval_all,res_stat)
genes_all<-c(genes_all,sim_dati_chiara[i,1])
}
qvalue<-p.adjust(pval_all,"BH")
df_stat_chiara<-data.frame(genes=genes_all pvalue=pval_all, qvalue= qvalue)
nrow(df_stat_chiara) == nrow(sim_dati_chiara)
pval_all<-NULL
genes_all<-NULL
#per ogni riga della matrice
for(i in 1:nrow(sim_dati_chiara)){
print(sim_dati_chiara[i,1])
#estrai i valori di CNV per i no cancer e cancer si
cancer_no<-as.numeric(sim_dati_chiara[i,2:6])
cancer_yes<-as.numeric(sim_dati_chiara[i,7:10])
#calcola la statistica
res_stat<-wilcox.test(cancer_yes,cancer_no)$p.value
pval_all<-c(pval_all,res_stat)
genes_all<-c(genes_all,sim_dati_chiara[i,1])
}
qvalue<-p.adjust(pval_all,"BH")
df_stat_chiara<-data.frame(genes=genes_all, pvalue=pval_all, qvalue= qvalue)
nrow(df_stat_chiara) == nrow(sim_dati_chiara)
setwd("/Users/guidantonio/Desktop/may_adi2021/14_05_2021")
library("xlsx")
library(openxlsx)
df2 <- read.xlsx(xlsxFile = "C1AC1B_integrate_TME_1_0.05_v2.xlsx", sheet = 1)
str(df2)
df2 <- unique(read.xlsx(xlsxFile = "C1AC1B_integrate_TME_1_0.05_v2.xlsx", sheet = 1))
df2
dim(ddf2
dim(df2)
str(df2)
str(df2[,c(1,8)])
str(unique(df2[,c(1,8)]))
str(unique(df2[,c(1:8)]))
str(unique(df2[,c(1:12)]))
str(unique(df2[,c(1:12,14)]))
132-128
dim(unique(df2))
str(unique(df2[,c(1:12,14)]))
str(unique(df2[,c(1:12,14,15,16)]))
str(unique(df2[,c(1:12,14,15)]))
str(unique(df2[,c(1:12,14,14)]))
str(unique(df2[,c(1:12,14)]))
str(unique(df2[,c(1:12,14,15)]))
str(unique(df2[,c(1:12,14,16)]))
str(unique(df2[,c(1:12,14,15)]))
df2_unique<-unique(df2[,c(1:12,14,15)])
df2_unique
table(df2_unique[,1])
test<-table(df2_unique[,1])
test[test>2]
test[test>=2]
df2 <- unique(read.xlsx(xlsxFile = "C1AC1B_integrate_TME_1_0.05_v2.xlsx", sheet = 1))
df2_unique<-unique(df2[,c(1:12,14,15)])
write.xlsx(C1AC1B_integrate_TME_1_0.05_v2_unique.xlsx,sep="\t",row.names=F,quote=F)
dim(df2_unique)
write.xlsx(df2_unique,"C1AC1B_integrate_TME_1_0.05_v2_unique.xlsx",sep="\t",row.names=F,quote=F)
132-7
132-4
132-4
300*28
300*10
100*10
